# -----------------------------------------------
# BioCurate ‚Äì Query and Identification of Botanical Specimens
# -----------------------------------------------

import streamlit as st
import pandas as pd
import numpy as np
import cv2
from streamlit_gsheets import GSheetsConnection
import requests
from io import BytesIO
from PIL import Image
from streamlit_option_menu import option_menu
import plotly.express as px


# -----------------------------------------------
# General Configuration
# -----------------------------------------------

st.set_page_config(page_title="BioCurate",  
    page_icon="favicon.png",
    layout="centered"
    )

# Session variables
if 'df' not in st.session_state:
    st.session_state.df = None
if 'barcode_col' not in st.session_state:
    st.session_state.barcode_col = 'CollectionCode'
if 'img_folder' not in st.session_state:
    st.session_state.img_folder = ''

# -----------------------------------------------
# Responsive horizontal menu
# -----------------------------------------------

# Create horizontal navigation bar
selected = option_menu(
    None,
    ["In√≠cio", "Base", "Relat√≥rio", "Busca", "Imagem"],
    icons=["house", "database", "bar-chart", "search", "image"],
    menu_icon="cast",
    default_index=0,
    orientation="horizontal",
    styles={
    "container": {
        "padding": "0!important",
        "background-color": "#00A8A8"  # Azul esverdeado - lateral da logo
    },
    "icon": {
        "color": "#FFFFFF",
        "font-size": "20px"
    },
    "nav-link": {
        "font-size": "18px",
        "text-align": "center",
        "margin": "0px",
        "color": "#FFFFFF",
        "--hover-color": "#B2DFDB"  # Verde-√°gua suave
    },
    "nav-link-selected": {
        "background-color": "#388E3C"  # Verde escuro
    },
},
)

# -----------------------------------------------
# P√°gina: In√≠cio
# -----------------------------------------------
if selected == "In√≠cio":
    col1, col2 = st.columns([1, 2])
    with col1:
        st.image("logo.png", width=200)
    with col2:
        st.markdown("""
            O **BioCurate** √© uma ferramenta voltada √† curadoria de cole√ß√µes biol√≥gicas, com √™nfase em herb√°rios.  
            Melhora a acessibilidade e a precis√£o na organiza√ß√£o de dados, permitindo o cruzamento de informa√ß√µes por leitura de c√≥digos de barras ou entrada manual.  
            Tamb√©m integra visualiza√ß√£o de imagens e consultas externas a bases como GBIF, Reflora e SpeciesLink.
            """)
    
    st.markdown("""
        ##### Recursos do BioCurate

        1. **üì¶ Base de Dados**  
        Carregue automaticamente a planilha oficial do HUAM ou envie sua pr√≥pria base em formato CSV (padr√£o Darwin Core). Ela ser√° usada em todas as buscas.

        2. **üìä Relat√≥rio**  
        Gere relat√≥rios por fam√≠lia, g√™nero ou esp√©cie, com contagem de amostras, lista de t√°xons e locais de armazenamento.

        3. **üìã Buscar Dados**  
        Consulte dados detalhados da amostra pelo n√∫mero de tombo ou c√≥digo de barras: nome cient√≠fico, local de coleta e armazenamento.

        4. **üì∑ Buscar Imagem**  
        Visualize a exsicata e envie para o Pl@ntNet para identifica√ß√£o autom√°tica da esp√©cie. Funciona apenas com amostras do HUAM, vinculadas ao Google Drive institucional.      
    """)
       
    st.markdown("""
        ### Sobre o BioCurate
        Este projeto √© uma iniciativa do **Herb√°rio da Universidade Federal do Amazonas (HUAM)** e faz parte da pesquisa de doutorado de **Deisy Saraiva**, vinculada ao **Programa de P√≥s-Gradua√ß√£o BIONORTE ‚Äì Rede de Biodiversidade e Biotecnologia da Amaz√¥nia Legal**. A pesquisa foca no uso de tecnologias para ampliar o acesso e a curadoria de cole√ß√µes cient√≠ficas, principalmente do Herb√°rio do HUAM.

        Contato: deisysaraiva@ufam.edu.br

        - [Acesse o site do HUAM](http://huam.site)
        - [A Cole√ß√£o no site institucional da UFAM](https://www.icb.ufam.edu.br/colecoes/huam.html)

        ---

        ### Sobre a Identifica√ß√£o Autom√°tica com Pl@ntNet

        BioCurate integra a identifica√ß√£o autom√°tica de esp√©cies por imagem via API Pl@ntNet.  
        Os resultados s√£o gerados por intelig√™ncia artificial e devem ser validados por um especialista.  
        Mais informa√ß√µes em plantnet.org.  

        ---

        ### Sobre o padr√£o Darwin Core

        O **Darwin Core** √© um padr√£o internacional para compartilhamento de dados sobre biodiversidade. Ele define termos recomendados que garantem consist√™ncia e interoperabilidade entre bases de dados.

        - [Reposit√≥rio Darwin Core](https://github.com/tdwg/dwc)
        - [Padr√£o Darwin Core](https://dwc.tdwg.org/terms)
        - [Modelo de Cabe√ßalho Darwin Core](https://splink.cria.org.br/digir/darwin2.xsd)
        - [V√≠deo explicativo (YouTube)](https://www.youtube.com/embed/YC0DfctXs5Q)
    """)

    with st.expander("Descri√ß√£o dos Metadados Necess√°ria na Base"):
        st.markdown("""
            A base de dados a ser carregada deve seguir o padr√£o **Darwin Core**, adotando campos fundamentais para curadoria:

            - **CollectionCode:** C√≥digo √∫nico da cole√ß√£o (n√∫mero do tombo HUAM).
            - **CatalogNumber:** N√∫mero de cat√°logo interno da amostra.
            - **Collector:** Nome do coletor principal respons√°vel pela amostra.
            - **Addcoll:** Coletores adicionais envolvidos na coleta.
            - **CollectorNumberPrefix:** Prefixo que antecede o n√∫mero de coleta (quando houver).
            - **CollectorNumber:** N√∫mero atribu√≠do pelo coletor √† amostra.
            - **CollectorNumberSuffix:** Sufixo complementar ao n√∫mero de coleta (quando houver).
            - **DayCollected / MonthCollected / YearCollected:** Datas exatas de coleta da amostra.
            - **Family:** Fam√≠lia bot√¢nica a que pertence a amostra.
            - **ScientificName:** Nome cient√≠fico completo (g√™nero + esp√©cie + infraesp√©cie, se aplic√°vel).
            - **Genus:** Nome do g√™nero bot√¢nico.
            - **Species:** Ep√≠teto espec√≠fico (nome da esp√©cie).
            - **ScientificNameAuthor:** Autoridade taxon√¥mica que descreveu o t√°xon.
            - **StorageLocation:** Localiza√ß√£o f√≠sica da amostra na cole√ß√£o (ex.: arm√°rio, prateleira).

            Esses campos garantem que a base de dados seja compat√≠vel com padr√µes de interc√¢mbio, como **GBIF**, **SpeciesLink** e **Reflora**, e viabilizam sua utiliza√ß√£o em **sistemas digitais** como o BioCurate.
        """)

# -----------------------------------------------
# P√°gina: Base de Dados
# -----------------------------------------------
elif selected == "Base":
    st.title("üì¶ Base de Dados")
    st.subheader("Conex√£o autom√°tica com Base de Dados HUAM")

    # Conex√£o autom√°tica com a planilha do HUAM
    conn = st.connection("gsheets", type=GSheetsConnection)
    df_base = conn.read(worksheet="Metadata", ttl="10m")
    df_image = conn.read(worksheet="Image", ttl="10m")#####################
    
    st.session_state.df_base = df_base
    st.session_state.df_image = df_image
    st.success("‚úîÔ∏è Base de Dados do Herb√°rio HUAM carregada!")
    st.write(df_base.head())

    # Op√ß√£o para sobrescrever com upload CSV
    st.subheader("Ou envie sua pr√≥pria base em formato DarwinCore")
    file = st.file_uploader("Selecione o arquivo CSV", type=["csv"])
    if file:
        df_base = pd.read_csv(file)
        st.session_state.df_base = df_base
        st.success("Arquivo CSV carregado! Base atualizada.")
        st.write(df_base.head())

# -----------------------------------------------
# P√°gina: Relat√≥rio
# -----------------------------------------------
elif selected == "Relat√≥rio":
    st.title("üìä Relat√≥rio de Dados")
    st.write(
        "Nesta p√°gina, √© poss√≠vel gerar relat√≥rios a partir da base de dados carregada na aba **BASE**. "
        "Informe o nome de uma **fam√≠lia**, **g√™nero** ou **esp√©cie** e clique em **Buscar** para visualizar o n√∫mero de amostras, "
        "a localiza√ß√£o na cole√ß√£o, a lista de t√°xons relacionados e os registros completos dispon√≠veis."
    )

    # Carrega a base
    if st.session_state.df is None:
        st.warning("‚ö†Ô∏è A base de dados precisa ser carregada na aba **BASE**!")	
    else:
        df = st.session_state.df_base.copy()

        # Listar todas as fam√≠lias do banco de dados
        if st.button("Listar Todas as Fam√≠lias Bot√¢nicas"):
            contagem_familias = df["Family"].value_counts().sort_values(ascending=True)
            st.session_state["contagem_familias"] = contagem_familias  # salva na sess√£o

            st.success(f"**Total de fam√≠lias encontradas:** {len(contagem_familias)}")
            st.write(", ".join(contagem_familias.index.tolist()))

        # Bot√£o para exibir o gr√°fico, somente se j√° houver contagem
        if "contagem_familias" in st.session_state:
            if st.button("üìä Exibir Gr√°fico Interativo por Fam√≠lia"):
                contagem_familias = st.session_state["contagem_familias"]
                df_plot = contagem_familias.reset_index()
                df_plot.columns = ["Fam√≠lia", "Amostras"]

                fig = px.bar(
                    df_plot,
                    x="Amostras",
                    y="Fam√≠lia",
                    orientation="h",
                    title="Amostras por Fam√≠lia",
                    labels={"Amostras": "Quantidade de Amostras", "Fam√≠lia": "Fam√≠lia"},
                    color_discrete_sequence=["#388E3C"],
                    height=max(400, len(df_plot) * 20)  # ajusta altura
                )

                st.plotly_chart(fig, use_container_width=True)        

        # RELAT√ìRIO POR FAM√çLIA
        st.subheader("Consultar por Fam√≠lia")
        familia = st.text_input("Digite o nome da fam√≠lia:")
        if st.button("üîç Buscar Fam√≠lia"):
            if familia:
                df_fam = df[df["Family"].str.upper() == familia.upper()]
                num_material = len(df_fam)
                generos = df_fam["Genus"].dropna().unique()
                especies = df_fam["ScientificName"].dropna().unique()
                locs = df_fam["StorageLocation"].dropna().unique()

                if len(locs) > 0:
                    locs_str = ", ".join(sorted(map(str, locs)))
                    st.info(f"**Localiza√ß√£o na cole√ß√£o:** {locs_str}")

                st.info(f"**Total de amostras:** {num_material}")
                st.info(f"**Total de g√™neros:** {len(generos)}")
                st.write("**G√™neros encontrados:**")
                st.write(", ".join(sorted(map(str, generos))))

                st.info(f"**Total de esp√©cies:** {len(especies)}")
                st.write("**Esp√©cies encontradas:**")
                st.write(", ".join(sorted(map(str, especies))))
            else:
                st.warning("Digite o nome da fam√≠lia antes de buscar.")

        # RELAT√ìRIO POR G√äNERO
        st.subheader("Consultar por G√™nero")
        genero = st.text_input("Digite o nome do g√™nero:")
        if st.button("üîç Buscar G√™nero"):
            if genero:
                df_gen = df[df["Genus"].str.upper() == genero.upper()]
                total_amostras = len(df_gen)
                so_genero = df_gen[df_gen["ScientificName"].isna() | (df_gen["ScientificName"].str.strip() == "")]
                especies_por_genero = df_gen["ScientificName"].dropna().unique()
                locs = df_gen["StorageLocation"].dropna().unique()

                if len(locs) > 0:
                    locs_str = ", ".join(sorted(map(str, locs)))
                    st.info(f"**Localiza√ß√£o na cole√ß√£o:** {locs_str}")

                st.info(f"**Amostras do g√™nero:** {total_amostras}")
                st.info(f"**Esp√©cies dentro do g√™nero:** {len(especies_por_genero)}")
                st.write("**Esp√©cies encontradas:**")
                st.write(", ".join(sorted(map(str, especies_por_genero))))
            else:
                st.warning("Digite o nome do g√™nero antes de buscar.")

        # RELAT√ìRIO POR ESP√âCIE
        st.subheader("Consultar por Esp√©cie")
        especie = st.text_input("Digite o nome cient√≠fico da esp√©cie:")
        if st.button("üîç Buscar Esp√©cie"):
            if especie:
                df_esp = df[df["ScientificName"].str.upper() == especie.upper()]
                total_especie = len(df_esp)
                locs = df_esp["StorageLocation"].dropna().unique()

                if len(locs) > 0:
                    locs_str = ", ".join(sorted(map(str, locs)))
                    st.info(f"**Localiza√ß√£o na cole√ß√£o:** {locs_str}")

                st.info(f"**Total de amostras da esp√©cie:** {total_especie}")

                if total_especie > 0:
                    st.write("**Detalhe das amostras encontradas:**")
                    st.dataframe(df_esp, use_container_width=True)
                else:
                    st.warning("Nenhuma amostra encontrada para essa esp√©cie.")
            else:
                st.warning("Digite o nome da esp√©cie antes de buscar.")
# -----------------------------------------------
# P√°gina: Buscar Dados
# -----------------------------------------------
elif selected == "Busca":
    st.title("üìã Buscar Dados")
    st.write("Nesta p√°gina, voc√™ pode consultar informa√ß√µes detalhadas das amostras a partir do n√∫mero de tombo. Digite o c√≥digo para visualizar dados taxon√¥micos, local de armazenamento, coletores e outras informa√ß√µes relevantes.")
    
    # Carrega a base
    if st.session_state.df is None:
        st.warning("‚ö†Ô∏è A base de dados precisa ser carregada na aba **BASE**!")	
    else:
        df = st.session_state.df_base.copy()

    # Entrada manual do c√≥digo
    code = ""
    codigo = st.text_input(
        "Digite o n√∫mero do tombo",
        value=code,
        placeholder="Ex.: HUAM001245 ou somente 1245"
    )

    # Bot√£o de busca
    if st.button("üîç Buscar"):
        df = st.session_state.df.copy()
        col = 'CollectionCode'
        st.session_state.barcode_col = col
        code = codigo.strip().upper()
        df[col] = df[col].astype(str).str.upper()
        result = df[
            df[col].str.upper().eq(code) |
            df[col].str.endswith(code.zfill(6))
        ]

        # Aqui salva o tombo na sess√£o!
        st.session_state["last_codigo"] = code

        if not result.empty:
            first = result.iloc[0]

            # Nome cient√≠fico + autor, com fallback
            sci = first.get("ScientificName", "")
            sci = sci if isinstance(sci, str) and sci.strip() else "Indeterminada"

            auth = first.get("ScientificNameAuthor", "")
            if not isinstance(auth, str) or not auth.strip():
                auth = ""

            if auth:
                st.markdown(
                    f"<div style='font-size: 24px; font-weight: bold;'><i>{sci}</i> {auth}</div>",
                    unsafe_allow_html=True
                )
            else:
                st.markdown(
                    f"<div style='font-size: 24px; font-weight: bold;'><i>{sci}</i></div>",
                    unsafe_allow_html=True
                )

            # Fam√≠lia
            fam = first.get("Family")
            if pd.notna(fam):
                st.markdown(
                    f"<div style='font-size: 18px;'>Fam√≠lia: {fam}</div>",
                    unsafe_allow_html=True
                )

            # Local de armazenamento
            loc = first.get("StorageLocation")
            if pd.notna(loc):
                st.markdown(
                    f"<b>Localiza√ß√£o na cole√ß√£o:</b> {loc}",
                    unsafe_allow_html=True
                )

            # Coletor + n√∫mero de coleta
            coll = first.get("Collector")
            addcoll = first.get("Addcoll")
            number = first.get("CollectorNumber")
                
            collected = f"{number or ''}".strip()
            if coll or collected:
                st.markdown(
                    f"<b>Coletor:</b> {coll or ''} {addcoll or ''} ‚Äî N¬∫ {collected}",
                    unsafe_allow_html=True
                )

            # Data de coleta
            date_parts = []
            for f in ["DayCollected", "MonthCollected", "YearCollected"]:
                val = first.get(f)
                if pd.notna(val):
                    date_parts.append(str(int(val)))
            if date_parts:
                st.markdown(
                    f"<b>Data de coleta:</b> {'/'.join(date_parts)}",
                    unsafe_allow_html=True
                )
            
            # Exibir linha completa da base
            st.dataframe(result, use_container_width=True)       
            
            # Busca externa pelo nome cient√≠fico ou fam√≠lia
            nome_busca = ""
            if isinstance(sci, str) and sci.strip():
                nome_busca = sci.strip().replace(" ", "+")
            elif isinstance(fam, str) and fam.strip():
                nome_busca = fam.strip().replace(" ", "+")

            st.markdown("""
            ### üì§ Pesquisar o nome em bases cient√≠ficas:
            <div style='display: flex; flex-wrap: wrap; gap: 10px;'>
                <a href='https://www.gbif.org/search?q=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>GBIF</a>
                <a href='https://floradobrasil.jbrj.gov.br/reflora/listaBrasil/ConsultaPublicaUC/BemVindoConsultaPublicaConsultar.do?nomeCompleto=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>Reflora Lista</a>
                <a href='https://floradobrasil.jbrj.gov.br/reflora/herbarioVirtual/ConsultaPublicoHVUC/BemVindoConsultaPublicaHVConsultar.do?nomeCientifico=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>Reflora HV</a>
                <a href='https://www.worldfloraonline.org/search?query=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>World Flora</a>
                <a href='https://powo.science.kew.org/results?q=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>POWO</a>
                <a href='https://www.ipni.org/search?q=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>IPNI</a>
                <a href='https://plants.jstor.org/search?filter=name&so=ps_group_by_genus_species+asc&Query=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>JSTOR Plants</a>
                <a href='https://specieslink.net/search/' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>SpeciesLink</a>
            </div>
            """, unsafe_allow_html=True)
                                    
        else:
            st.error("C√≥digo n√£o encontrado.")        

# -----------------------------------------------
# P√°gina: Buscar Imagem + Pl@ntNet
# -----------------------------------------------
elif selected == "Imagem":
    st.title("üì∑ Buscar Imagem")
    st.write(
        "Nesta p√°gina, voc√™ pode buscar imagens das amostras do HUAM vinculadas √† da base de dados e utilizar o servi√ßo **Pl@ntNet** para realizar a identifica√ß√£o autom√°tica da esp√©cie. "
        "Basta informar o n√∫mero do tombo para visualizar a imagem da exsicata e receber sugest√µes de identifica√ß√£o bot√¢nica."
    )
    
    # Carrega a base
    if st.session_state.df is None:
        st.warning("‚ö†Ô∏è A base de dados precisa ser carregada na aba **BASE**!")	
    else:
        df = st.session_state.df_image.copy()

    def drive_link_to_direct(link):
        try:
            parts = link.split("/d/")
            if len(parts) > 1:
                file_id = parts[1].split("/")[0]
                return file_id
        except Exception:
            pass
        return None

    # Entrada manual (pr√©-preenchida)
    code = ""
    codigo = st.text_input(
        "Digite o n√∫mero do tombo",
        value=code,
        placeholder="Ex.: HUAM001245 ou somente 1245"
    )
    
    # Buscar e Identificar (Pl@ntNet)
    if st.button("üîç Buscar imagens e Identificar"):
        col_codigo = 'barcode'
        df[col_codigo] = df[col_codigo].astype(str).str.upper()
        codigo = codigo.strip().upper()

        resultado = df[
            df[col_codigo].eq(codigo) |
            df[col_codigo].str.endswith(codigo) |
            df[col_codigo].str.endswith(codigo.zfill(6))
        ]

        if resultado.empty:
            st.session_state.result_image = None
            st.warning(f"Nenhuma exsicata encontrada para o tombo: {codigo}")
            
        else:
            st.session_state.result_image = resultado
            st.success(f"{len(resultado)} resultado(s) encontrado(s):")
            # üö© Mostrar o resultado Imagem se existir
            if 'result_image' in st.session_state and st.session_state.result_image is not None:
                for _, row in st.session_state.result_image.iterrows():

                #for _, row in resultado.iterrows():
                    file_id = drive_link_to_direct(row['UrlExsicata'])
                    if file_id:
                        url = f"https://drive.google.com/uc?export=view&id={file_id}"
                        response = requests.get(url)

                        if response.status_code == 200:
                            content_type = response.headers.get('Content-Type', '')
                            if 'image' in content_type:
                                try:
                                    from PIL import Image
                                    import io

                                    img = Image.open(io.BytesIO(response.content))
                                    #img = img.rotate(-90, expand=True)
                                    st.image(img, caption=row['ArchiveName'])

                                    # Envia para Pl@ntNet
                                    API_KEY = st.secrets["plantnet"]["api_key"]
                                    PLANTNET_URL = f"https://my-api.plantnet.org/v2/identify/all?api-key={API_KEY}"

                                    files = {
                                        "images": ('image.jpg', BytesIO(response.content), 'image/jpeg'),
                                        "organs": (None, 'leaf')
                                    }

                                    st.info("Enviando para Pl@ntNet...")
                                    r = requests.post(PLANTNET_URL, files=files)

                                    if r.status_code == 200:
                                        results = r.json().get("results", [])
                                        if not results:
                                            st.info("Nenhuma correspond√™ncia encontrada.")
                                        else:
                                            st.subheader("Resultados da identifica√ß√£o com a API do Pl@ntnet")
                                            for res in results:
                                                species = res['species']['scientificNameWithoutAuthor']
                                                score = res['score']
                                                nome_busca = species.strip().replace(" ", "+")
                                                st.write(
                                                    f"- **{species}** ‚Äî Confian√ßa: {score:.2%} | "
                                                    f"[Ver resultados desse taxon no GBIF](https://www.gbif.org/search?q={nome_busca})"
                                                 )
                                            
                                    else:
                                        st.error(f"Erro na API Pl@ntNet: {r.status_code}")

                                except Exception as e:
                                    st.error(f"Erro ao abrir/processar a imagem: {e}")

                            else:
                                st.warning("O link n√£o retornou uma imagem v√°lida. Verifique o compartilhamento.")
                        else:
                            st.warning("N√£o foi poss√≠vel carregar a imagem do Drive.")
                    else:
                        st.warning("Link do Drive inv√°lido.")

    