# -----------------------------------------------
# BioCurate ‚Äì Curation and Identification of Botanical Specimens
# Developed with Streamlit
#
# Author: Deisy Saraiva
# Institution: Federal University of Amazonas (UFAM)
# Program: PhD in Biodiversity and Biotechnology ‚Äì BIONORTE
# Contact: deisysaraiva@ufam.edu.br
#
# Creation date: 2025-06-25
# Last updated: 2025-07-14
# -----------------------------------------------

import streamlit as st
import pandas as pd
import numpy as np
import cv2
from streamlit_gsheets import GSheetsConnection
import requests
from io import BytesIO
from PIL import Image
from streamlit_option_menu import option_menu
import plotly.express as px

def run():
    # -----------------------------------------------
    # General Configuration
    # -----------------------------------------------

    st.set_page_config(page_title="BioCurate",  
        page_icon="favicon.png",
        layout="centered"
        )

    # Session variables
    if 'df' not in st.session_state:
        st.session_state.df = None
    if 'barcode_col' not in st.session_state:
        st.session_state.barcode_col = 'CollectionCode'
    if 'img_folder' not in st.session_state:
        st.session_state.img_folder = ''

    # -----------------------------------------------
    # Responsive horizontal menu
    # -----------------------------------------------

    # Create horizontal navigation bar
    selected = option_menu(
        None,
        ["Home", "Dataset", "Report", "Lookup", "Image"],
        icons=["house", "database", "bar-chart", "search", "image"],
        menu_icon="cast",
        default_index=0,
        orientation="horizontal",
        styles={
        "container": {
            "padding": "0!important",
            "background-color": "#00A8A8"  # Azul esverdeado - lateral da logo
        },
        "icon": {
            "color": "#FFFFFF",
            "font-size": "20px"
        },
        "nav-link": {
            "font-size": "18px",
            "text-align": "center",
            "margin": "0px",
            "color": "#FFFFFF",
            "--hover-color": "#B2DFDB"  # Verde-√°gua suave
        },
        "nav-link-selected": {
            "background-color": "#388E3C"  # Verde escuro
        },
    },
    )

    # -----------------------------------------------
    # Home Page
    # -----------------------------------------------
    if selected == "Home":
        col1, col2 = st.columns([1, 2])
        with col1:
            st.image("logo.png", width=200)
        with col2:
            st.markdown("""
                **BioCurate** is a tool designed for the curation of biological collections, with an emphasis on herbaria.  
                It improves data accessibility and accuracy by enabling information retrieval through barcode scanning or manual input.  
                The tool also integrates image visualization and external queries to databases such as GBIF, Reflora, and SpeciesLink.
                """)
        
        st.markdown("""
            ##### BioCurate Features

            1. **üì¶ Dataset**  
            Automatically load the official HUAM spreadsheet or upload your own CSV file (Darwin Core standard). This dataset will be used for all queries.

            2. **üìä Report**  
            Generate reports by family, genus, or species, including sample counts, taxon lists, and storage locations.

            3. **üìã Lookup Data**  
            Access detailed specimen information using the tomb number or barcode: scientific name, collection site, and storage location.

            4. **üì∑ Lookup Image**  
            View the specimen image and send it to Pl@ntNet for automatic species identification. Works only for HUAM samples linked to the institutional Google Drive.
            """)
        
        st.markdown("""
            ### About BioCurate  
            This project is an initiative of the **Herbarium of the Federal University of Amazonas (HUAM)** and is part of the PhD research of **Deisy Saraiva**, affiliated with the **BIONORTE Graduate Program ‚Äì Biodiversity and Biotechnology Network of the Legal Amazon**.  
            The research focuses on the use of technology to improve access and curation of scientific collections, especially the HUAM Herbarium.

            Contact: deisysaraiva@ufam.edu.br

            - [Visit the HUAM website](http://huam.site)  
            - [HUAM Collection at UFAM's official website](https://www.icb.ufam.edu.br/colecoes/huam.html)

            ---

            ### About Automatic Identification with Pl@ntNet

            BioCurate integrates automatic species identification through the Pl@ntNet API.  
            The results are generated by artificial intelligence and must be validated by a specialist.  
            More information at [plantnet.org](https://plantnet.org).

            ---

            ### About the Darwin Core Standard

            **Darwin Core** is an international standard for sharing biodiversity data. It defines recommended terms that ensure consistency and interoperability across databases.

            - [Darwin Core Repository](https://github.com/tdwg/dwc)  
            - [Darwin Core Terms](https://dwc.tdwg.org/terms)  
            - [Darwin Core Header Schema](https://splink.cria.org.br/digir/darwin2.xsd)  
            - [Introductory Video (YouTube)](https://www.youtube.com/embed/YC0DfctXs5Q)
            """)

        with st.expander("Required Metadata Description in the Dataset"):
            st.markdown("""
                The dataset to be loaded must follow the **Darwin Core** standard, using key fields essential for specimen curation:

                - **CollectionCode:** Unique collection code (tomb number from HUAM).
                - **CatalogNumber:** Internal catalog number of the specimen.
                - **Collector:** Name of the main collector responsible for the specimen.
                - **Addcoll:** Additional collectors involved in the collection.
                - **CollectorNumberPrefix:** Prefix before the collector number (if any).
                - **CollectorNumber:** Number assigned by the collector to the specimen.
                - **CollectorNumberSuffix:** Suffix after the collector number (if any).
                - **DayCollected / MonthCollected / YearCollected:** Exact collection date of the specimen.
                - **Family:** Botanical family of the specimen.
                - **ScientificName:** Full scientific name (genus + species + infraspecific epithet, if applicable).
                - **Genus:** Botanical genus name.
                - **Species:** Specific epithet (species name).
                - **ScientificNameAuthor:** Taxonomic authority who described the taxon.
                - **StorageLocation:** Physical location of the specimen in the collection (e.g., cabinet, shelf).

                These fields ensure compatibility with biodiversity data-sharing standards such as **GBIF**, **SpeciesLink**, and **Reflora**, and enable use in **digital systems** like BioCurate.
                """)
        #Supported by
        st.markdown("---")
        st.markdown(" ##### Supported by")
        st.image("SupportedBy.png", use_container_width=True)

    # -----------------------------------------------
    # Data Base Page
    # -----------------------------------------------
    elif selected == "Dataset":
        st.subheader("üì¶ Dataset")
        st.subheader("Automatic connection to HUAM Database")

        # Automatic connection to the HUAM sheet
        conn = st.connection("gsheets", type=GSheetsConnection)
        df_base = conn.read(worksheet="Metadata", ttl="10m")

        st.session_state.df = df_base
        st.success("‚úîÔ∏è HUAM Herbarium Database loaded!")
        st.write(df_base.head())

        # Upload CSV to overwrite existing data
        st.subheader("Or upload your own DarwinCore-formatted dataset")
        file = st.file_uploader("Select a CSV file", type=["csv"])
        if file:
            df_base = pd.read_csv(file)
            st.session_state.df = df_base
            st.success("CSV file loaded! Dataset updated.")
            st.write(df_base.head())

    # -----------------------------------------------
    # Report Page
    # -----------------------------------------------
    elif selected == "Report":
        st.subheader("üìä Data Report")
        st.write(
            "Generate detailed reports from the database loaded in the BASE tab."  
            "Simply enter the name of a family, genus, or species and click Search to view the number of registered specimens, their location in the collection, the list of related taxa, and all available records."
        )

        # Load the database
        if st.session_state.df is None:
            st.warning("‚ö†Ô∏è Please load the database in the **BASE** tab first!")	
        else:
            df = st.session_state.df.copy()

            # Show all botanical families in the dataset
            if st.button("Display all plant families"):
                contagem_familias = df["Family"].value_counts().sort_values(ascending=True)
                st.session_state["contagem_familias"] = contagem_familias  # salva na sess√£o

                st.success(f"**Total families found:** {len(contagem_familias)}")
                st.write(", ".join(contagem_familias.index.tolist()))

            # Show chart button (only if data is available)
            if "contagem_familias" in st.session_state:
                if st.button("üìä Generate Interactive Chart by Family"):
                    contagem_familias = st.session_state["contagem_familias"]
                    df_plot = contagem_familias.reset_index()
                    df_plot.columns = ["Family", "Samples"]

                    fig = px.bar(
                        df_plot,
                        x="Samples",
                        y="Family",
                        orientation="h",
                        title="Specimens by Family",
                        labels={"Samples": "Sample Count", "Family": "Family"},
                        color_discrete_sequence=["#388E3C"],
                        height=max(400, len(df_plot) * 20)
                    )

                    st.plotly_chart(fig, use_container_width=True)        

            # Family Report
            st.subheader("Lookup by Family")
            familia = st.text_input("Type the botanical family name:")
            if st.button("üîç Lookup Family"):
                if familia:
                    df_fam = df[df["Family"].str.upper() == familia.upper()]
                    num_material = len(df_fam)
                    generos = df_fam["Genus"].dropna().unique()
                    especies = df_fam["ScientificName"].dropna().unique()
                    locs = df_fam["StorageLocation"].dropna().unique()

                    if len(locs) > 0:
                        locs_str = ", ".join(sorted(map(str, locs)))
                        st.info(f"**Storage location:** {locs_str}")

                    st.info(f"**Total samples:** {num_material}")
                    st.info(f"**Total genera:** {len(generos)}")
                    st.write("**Genera found:**")
                    st.write(", ".join(sorted(map(str, generos))))

                    st.info(f"**Total species:** {len(especies)}")
                    st.write("**Species found:**")
                    st.write(", ".join(sorted(map(str, especies))))
                else:
                    st.warning("Please enter the family name before searching!")

            # Genus Report
            st.subheader("Lookup by Genus")
            genero = st.text_input("Enter the genus name:")
            if st.button("üîç Lookup by Genus"):
                if genero:
                    df_gen = df[df["Genus"].str.upper() == genero.upper()]
                    total_amostras = len(df_gen)
                    so_genero = df_gen[df_gen["ScientificName"].isna() | (df_gen["ScientificName"].str.strip() == "")]
                    especies_por_genero = df_gen["ScientificName"].dropna().unique()
                    locs = df_gen["StorageLocation"].dropna().unique()

                    if len(locs) > 0:
                        locs_str = ", ".join(sorted(map(str, locs)))
                        st.info(f"**Storage location:** {locs_str}")

                    st.info(f"**Specimens in genus:** {total_amostras}")
                    st.info(f"**Species within genus:** {len(especies_por_genero)}")
                    st.write("**Species found:**")
                    st.write(", ".join(sorted(map(str, especies_por_genero))))
                else:
                    st.warning("Please enter the genus name before searching!")

            # Species Report
            st.subheader("Lookup by Species")
            especie = st.text_input("Enter the scientific name of the species:")
            if st.button("üîç Lookup Species"):
                if especie:
                    df_esp = df[df["ScientificName"].str.upper() == especie.upper()]
                    total_especie = len(df_esp)
                    locs = df_esp["StorageLocation"].dropna().unique()

                    if len(locs) > 0:
                        locs_str = ", ".join(sorted(map(str, locs)))
                        st.info(f"**Storage location:** {locs_str}")

                    st.info(f"**Total specimens of the species:** {total_especie}")

                    if total_especie > 0:
                        st.write("**Details of the specimens found:**")
                        st.dataframe(df_esp, use_container_width=True)
                    else:
                        st.warning("No specimens found for this species.")
                else:
                    st.warning("Please enter the species name before searching!")
    # -----------------------------------------------
    # Data Search Page
    # -----------------------------------------------
    elif selected == "Lookup":
        st.subheader("üìã Lookup Data")
        st.write("Consult detailed specimen information using the accession number. Enter the code to view taxonomic data, storage location, collectors, and other relevant information.")

        # Load the database
        if st.session_state.df is None:
            st.warning("‚ö†Ô∏è Please load the database in the **BASE** tab first!")	
        else:
            df = st.session_state.df.copy()

        # Manual input of the code
        code = ""
        codigo = st.text_input(
            "Enter the accession number",
            value=code,
            placeholder="e.g., HUAM001245 or just 1245"
        )

        # Lookup button
        if st.button("üîç Lookup Data"):
            df = st.session_state.df.copy()
            col = 'CollectionCode'
            st.session_state.barcode_col = col
            code = codigo.strip().upper()
            df[col] = df[col].astype(str).str.upper()
            result = df[
                df[col].str.upper().eq(code) |
                df[col].str.endswith(code.zfill(6))
            ]

            # Save the specimen code to the session
            st.session_state["last_codigo"] = code

            if not result.empty:
                first = result.iloc[0]

                # Scientific name and author (with fallback)
                sci = first.get("ScientificName", "")
                sci = sci if isinstance(sci, str) and sci.strip() else "Undetermined"

                auth = first.get("ScientificNameAuthor", "")
                if not isinstance(auth, str) or not auth.strip():
                    auth = ""

                if auth:
                    st.markdown(
                        f"<div style='font-size: 24px; font-weight: bold;'><i>{sci}</i> {auth}</div>",
                        unsafe_allow_html=True
                    )
                else:
                    st.markdown(
                        f"<div style='font-size: 24px; font-weight: bold;'><i>{sci}</i></div>",
                        unsafe_allow_html=True
                    )

                # Family
                fam = first.get("Family")
                if pd.notna(fam):
                    st.markdown(
                        f"<div style='font-size: 18px;'>Family: {fam}</div>",
                        unsafe_allow_html=True
                    )

                # Storage Location
                loc = first.get("StorageLocation")
                if pd.notna(loc):
                    st.markdown(
                        f"<b>Storage location:</b> {loc}",
                        unsafe_allow_html=True
                    )

                # Collector and collection number
                coll = first.get("Collector")
                addcoll = first.get("Addcoll")
                number = first.get("CollectorNumber")
                    
                collected = f"{number or ''}".strip()
                if coll or collected:
                    st.markdown(
                        f"<b>Collector:</b> {coll or ''} {addcoll or ''} ‚Äî N¬∫ {collected}",
                        unsafe_allow_html=True
                    )

                # Collection date
                date_parts = []
                for f in ["DayCollected", "MonthCollected", "YearCollected"]:
                    val = first.get(f)
                    if pd.notna(val):
                        date_parts.append(str(int(val)))
                if date_parts:
                    st.markdown(
                        f"<b>Collection date:</b> {'/'.join(date_parts)}",
                        unsafe_allow_html=True
                    )
                
                # View full dataset entry
                st.dataframe(result, use_container_width=True)       
                
                # External search by scientific name or family
                nome_busca = ""
                if isinstance(sci, str) and sci.strip():
                    nome_busca = sci.strip().replace(" ", "+")
                elif isinstance(fam, str) and fam.strip():
                    nome_busca = fam.strip().replace(" ", "+")

                st.markdown("""
                ### üì§ Look up the name in scientific databases:
                <div style='display: flex; flex-wrap: wrap; gap: 10px;'>
                    <a href='https://www.gbif.org/search?q=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>GBIF</a>
                    <a href='https://floradobrasil.jbrj.gov.br/reflora/listaBrasil/ConsultaPublicaUC/BemVindoConsultaPublicaConsultar.do?nomeCompleto=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>Reflora Lista</a>
                    <a href='https://floradobrasil.jbrj.gov.br/reflora/herbarioVirtual/ConsultaPublicoHVUC/BemVindoConsultaPublicaHVConsultar.do?nomeCientifico=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>Reflora HV</a>
                    <a href='https://www.worldfloraonline.org/search?query=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>World Flora</a>
                    <a href='https://powo.science.kew.org/results?q=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>POWO</a>
                    <a href='https://www.ipni.org/search?q=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>IPNI</a>
                    <a href='https://plants.jstor.org/search?filter=name&so=ps_group_by_genus_species+asc&Query=""" + nome_busca + """' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>JSTOR Plants</a>
                    <a href='https://specieslink.net/search/' target='_blank' style='background: #eee; padding: 8px 12px; border-radius: 5px; text-decoration: none;'>SpeciesLink</a>
                </div>
                """, unsafe_allow_html=True)
                                        
            else:
                st.error("No record found for this code!")        

    # -----------------------------------------------
    # Image Lookup + Pl@ntNet
    # -----------------------------------------------
    elif selected == "Image":
        st.subheader("üì∑ Lookup Image")
        st.write(
            "Search for images of HUAM specimens linked to the database and use the **Pl@ntNet** service to automatically identify the species. "
            "Just enter the accession number to view the herbarium specimen image and receive botanical identification suggestions."
        )
        
        # Load the database
        conn = st.connection("gsheets", type=GSheetsConnection)
        df = conn.read(worksheet="Image", ttl="10m")
        
        def drive_link_to_direct(link):
            try:
                parts = link.split("/d/")
                if len(parts) > 1:
                    file_id = parts[1].split("/")[0]
                    return file_id
            except Exception:
                pass
            return None

        # Manual input of the code
        code = ""
        codigo = st.text_input(
            "Enter the accession number",
            value=code,
            placeholder="e.g., HUAM001245 or just 1245"
        )
        
        # Search and Identify (Pl@ntNet)
        if st.button("üîç Lookup Images and Identify"):
            col_codigo = 'barcode'
            df[col_codigo] = df[col_codigo].astype(str).str.upper()
            codigo = codigo.strip().upper()

            resultado = df[
                df[col_codigo].eq(codigo) |
                df[col_codigo].str.endswith(codigo) |
                df[col_codigo].str.endswith(codigo.zfill(6))
            ]

            if resultado.empty:
                st.session_state.result_image = None
                st.warning(f"No specimen image found for accession number: {codigo}")
                
            else: 
                st.session_state.result_image = resultado
                st.success(f"{len(resultado)} result(s) found:")
                
                # Show the image result, if available
                if 'result_image' in st.session_state and st.session_state.result_image is not None:
                    for _, row in st.session_state.result_image.iterrows():
                        file_id = drive_link_to_direct(row['UrlExsicata'])
                        
                        if file_id:
                            url = f"https://drive.google.com/uc?export=view&id={file_id}"
                            response = requests.get(url)

                            if response.status_code == 200:
                                content_type = response.headers.get('Content-Type', '')
                                
                                if 'image' in content_type:
                                    try:
                                        from PIL import Image
                                        import io

                                        img = Image.open(io.BytesIO(response.content))
                                        #img = img.rotate(-90, expand=True)
                                        st.image(img, caption=row['ArchiveName'])

                                        # Send to Pl@ntNet
                                        API_KEY = st.secrets["plantnet"]["api_key"]
                                        PLANTNET_URL = f"https://my-api.plantnet.org/v2/identify/all?api-key={API_KEY}"

                                        files = {
                                            "images": ('image.jpg', BytesIO(response.content), 'image/jpeg'),
                                            "organs": (None, 'leaf')
                                        }

                                        st.info("Submitting to Pl@ntNet...")
                                        r = requests.post(PLANTNET_URL, files=files)

                                        if r.status_code == 200:
                                            results = r.json().get("results", [])
                                            if not results:
                                                st.info("No matches found!")
                                            else:
                                                st.subheader("Pl@ntNet identification results")
                                                for res in results:
                                                    species = res['species']['scientificNameWithoutAuthor']
                                                    score = res['score']
                                                    nome_busca = species.strip().replace(" ", "+")
                                                    st.write(
                                                        f"- **{species}** ‚Äî Confidence: {score:.2%} | "
                                                        f"[Ver resultados desse taxon no GBIF](https://www.gbif.org/search?q={nome_busca})"
                                                    )
                                                
                                        else:
                                            st.error(f"Pl@ntNet API error: {r.status_code}")

                                    except Exception as e:
                                        st.error(f"Error opening/processing the image: {e}")

                                else:
                                    st.warning("The link did not return a valid image. Please check the sharing settings.")
                            else:
                                st.warning("Failed to load image from Drive.")
                        else:
                            st.warning("Invalid Drive link.")

        